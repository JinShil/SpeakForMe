<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>SpeakForMe</title>

    <style>
        body {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        #phraseButtons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 5px;
        }

        .phrases {
            gap: 5px;
        }

        .phraseCaption {
            color: #808080;
            display: flex;
            flex-direction: row;
        }

        .alignLeft {
            justify-content: flex-start;
        }

        .alignRight {
            justify-content: flex-end;
        }

        .phraseButtons {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
            align-items: flex-start;
        }

        button {
            border-radius: 5px;
            border-width: 1px;
        }

        .phraseButton {
            white-space: nowrap;
        }

        .largeFont {
            font-size: 150%;
        }

        #txt {
            text-align: center;
            padding: 0;
            background-color: #E2E2E2;
            width: 100%;
            height: 1.4em;
            white-space: nowrap;
            border: solid 1px black;
            border-radius: 5px;
            font-size: 220%;
        }

        ::placeholder {
            color: #A0A0A0;
            opacity: 1;
        }

        .actionButton {
            display: flex; 
            flex-direction: column; 
            align-items: center;
            width: 58px;
            height: 58px;
            cursor: pointer;
            font-size: 75%;
            user-select: none;
        }
    </style>
  </head>

  <body>
    <div style="display: grid; grid-template-columns: 1fr auto; gap: 5px;">
        <input id="txt" type="text" placeholder="Type here and press &quot;Enter&quot;" autofocus />
        <button class="actionButton" style="height: 52px;" onclick="clearText(event);">
            <svg width="32" height="32" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg">
                <path fill="#9f4c4c" fill-rule="evenodd" transform="translate(-910 -450)" d="M940,510a30,30,0,1,1,30-30A30,30,0,0,1,940,510Zm15-20.047A3.408,3.408,0,0,1,955,494.77l-0.221.22a3.42,3.42,0,0,1-4.833,0l-8.764-8.755a1.71,1.71,0,0,0-2.417,0l-8.741,8.747a3.419,3.419,0,0,1-4.836,0l-0.194-.193a3.408,3.408,0,0,1,.017-4.842l8.834-8.735a1.7,1.7,0,0,0,0-2.43l-8.831-8.725a3.409,3.409,0,0,1-.018-4.844l0.193-.193a3.413,3.413,0,0,1,2.418-1c0.944,0,3.255,1.835,3.872,2.455l7.286,7.287a1.708,1.708,0,0,0,2.417,0l8.764-8.748a3.419,3.419,0,0,1,4.832,0L955,465.243a3.408,3.408,0,0,1,0,4.818l-8.727,8.737a1.7,1.7,0,0,0,0,2.407Z"/>
            </svg>
            <span>Clear</span>
        </button>
    </div>

    <div id="phraseButtons">
    </div>

    <div>&nbsp;</div>

    <div style="flex-shrink: 1; display: flex; gap: 5px;">
        <button onclick="downloadPhraseData();" class="actionButton">
            <svg width="30" height="30" viewBox="0 0 1024 1024"><path d="M512 791.466667L277.333333 512h469.333334zM426.666667 85.333333h170.666666v85.333334h-170.666666zM426.666667 213.333333h170.666666v85.333334h-170.666666z" fill="#1565C0" /><path d="M426.666667 341.333333h170.666666v234.666667h-170.666666zM128 853.333333h768v85.333334H128z" fill="#1565C0" /></svg>
            <span>Download<br/>Phrases</span>
        </button>
        <input type="file" id="uploadInput" style="display: none;" onchange="readUploadedFile(event)">
        <button onclick="uploadPhraseData()" class="actionButton">
            <svg width="30" height="30" viewBox="0 0 1024 1024" style="transform: rotate(180deg);"><path d="M512 791.466667L277.333333 512h469.333334zM426.666667 85.333333h170.666666v85.333334h-170.666666zM426.666667 213.333333h170.666666v85.333334h-170.666666z" fill="#1565C0" /><path d="M426.666667 341.333333h170.666666v234.666667h-170.666666zM128 853.333333h768v85.333334H128z" fill="#1565C0" /></svg>
            <span>Upload<br/>Phrases</span>
        </button>
        <button onclick="resetPhraseData(true)" class="actionButton">
            <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 10C2 10 2.12132 9.15076 5.63604 5.63604C9.15076 2.12132 14.8492 2.12132 18.364 5.63604C19.6092 6.88131 20.4133 8.40072 20.7762 10M2 10V4M2 10H8M22 14C22 14 21.8787 14.8492 18.364 18.364C14.8492 21.8787 9.15076 21.8787 5.63604 18.364C4.39076 17.1187 3.58669 15.5993 3.22383 14M22 14V20M22 14H16" stroke="green" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>Reset<br/>Phrases</span>
        </button>
        <div style="flex-grow: 1;">&nbsp;</div>
        <button onclick="decreaseFont()" class="actionButton">
            <svg width="30" height="30" viewBox="0 0 512 423.65">
                <path fill="#1565C0" fill-rule="nonzero" d="M274.89 336.65H121.85l-29.09 87H0L157.6 0h80.94l158.6 423.65h-92.86l-29.39-87zm70.93-226.22V55.74H512v54.69H345.82zM145.39 265.74h105.96l-53.23-158.69-52.73 158.69z"/>
            </svg>
            <span>Decrease<br/>Font</span>
        </button>
        <button onclick="increaseFont()" class="actionButton">
            <svg width="30" height="30" viewBox="0 0 512 423.65">
                <path fill="#1565C0" fill-rule="nonzero" d="M274.89 336.65H121.85l-29.09 87H0L157.6 0h80.94l158.6 423.65h-92.86l-29.39-87zm181.37-226.22v55.74h-54.69v-55.74h-55.75V55.74h55.75V0h54.69v55.74H512v54.69h-55.74zM145.39 265.74h105.96l-53.23-158.69-52.73 158.69z"/>
            </svg>
            <span>Increase<br/>Font</span>
        </button>
    </div>

    <script>
        const synth = window.speechSynthesis;

        const inputForm = document.querySelector("form");
        const inputTxt = document.querySelector("#txt");
        const phraseButtons = document.querySelector("#phraseButtons");

        document.body.addEventListener("keypress", (e) =>
        {
            if (e.key == "Enter")
            {
                const text = inputTxt.value.trim();
                
                speak(text);

                inputTxt.select();

                e.preventDefault();
            }
        })

        function clearText(e) {
            inputTxt.value='';
            inputTxt.focus();
        }

        function decreaseFont() {
            Array.from(document.getElementsByClassName("phraseButton")).forEach(i => {
                const f = parseFloat(getComputedStyle(i).fontSize);
                i.style.fontSize = (f - 1) + "px";
            });
        }

        function increaseFont() {
            Array.from(document.getElementsByClassName("phraseButton")).forEach(i => {
                const f = parseFloat(getComputedStyle(i).fontSize);
                i.style.fontSize = (f + 1) + "px";
            });
        }

        function downloadPhraseData() {
            let phraseDataJson = localStorage.getItem("phraseData");
            if (!phraseDataJson) {
                throw new Error("`phraseData` was not found");
            }
            let phraseData = JSON.parse(phraseDataJson);

            const jsonContent = JSON.stringify(phraseData, null, 2);
            const blob = new Blob([jsonContent], { type: "application/json" });

            const url = URL.createObjectURL(blob);

            const a = document.createElement("a");
            a.href = url;
            a.download = "phrases.json";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            URL.revokeObjectURL(url);
        }

        function createPhraseCategory(categoryName, phrases, className) {
            let container = document.createElement("div");
            container.classList.add("phrases");
            phraseButtons.appendChild(container);

            let caption = document.createElement("div");
            caption.classList.add("phraseCaption");
            caption.classList.add(className);
            caption.textContent = categoryName;
            container.appendChild(caption);

            let buttons = document.createElement("div");
            buttons.classList.add("phraseButtons");
            buttons.classList.add(className);
            container.appendChild(buttons);

            phrases.forEach(i => {
                let b = document.createElement("button");
                b.classList.add("phraseButton");
                b.classList.add("largeFont");
                b.innerText = i;
                b.addEventListener("click", speakWord);
                buttons.appendChild(b);
            });
        }

        function renderPhrases(phraseData) {
            let i = 0;
            phraseButtons.innerHTML = "";
            for(c in phraseData) {
                createPhraseCategory(c, phraseData[c], i % 2 ? "alignRight" : "alignLeft");
                i++;
            }
        }

        function uploadPhraseData() {
            const inputElement = document.getElementById("uploadInput");
            inputElement.value = "";
            inputElement.click();
        }

        function readUploadedFile(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(re) {
                    const fileContent = re.target.result;
                    try {
                        phraseData = JSON.parse(fileContent);
                        localStorage.setItem("phraseData", JSON.stringify(phraseData))
                        loadPhraseData();
                    } catch (error) {
                        alert("Error parsing JSON: " + error);
                    }
                };
                reader.readAsText(file);
            }
        }

        function resetPhraseData(doConfirm) {
            if (doConfirm) {
                if (!confirm("Are you sure?")) {
                    return;
                }
            }

            phraseData = {
                "Simple": [
                    "No", "Yes", "I don't know", "OK", 
                ],
                "Common": [
                    "I'm OK", "That's good", "Thank you", 
                ],
                "Requests": [
                    "I'm thirsty", "I'm hungry", "I'm tired", 
                ],
                "Concern": [
                    "I'm uncomfortable", "Please call 911"
                ],
                "Greetings": [
                    "Hello", "Goodbye", "Good morning", "Good afternoon", "Good evening", "Good night"
                ],
                "Direction": [
                    "Up", "Down", "Left", "Right"
                ],
                "Pain Scale": [
                    "I'm in pain", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
                ]
            };

            localStorage.setItem("phraseData", JSON.stringify(phraseData));

            renderPhrases(phraseData);
        }

        function loadPhraseData() {
            let phraseData = null;
            try {
                let phraseDataJson = localStorage.getItem("phraseData");
                if (!phraseDataJson) {
                    throw new Error("`phraseData` was not found");
                }
                phraseData = JSON.parse(phraseDataJson);

                renderPhrases(phraseData);
            }
            catch (e) {
                resetPhraseData(false);
            }
        }

        loadPhraseData();

        function speakWord(e) {
            const text = e.target.textContent;
            speak(text);
            e.target.blur();
        }

        let voices = [];
        let voice;

        function populateVoiceList() {
            voices = synth.getVoices();

            // Google Chrome
            voice = voices.find(i => i.name === "Google US English");
                
            if (!voice) {
                // Microsoft Windows
                voice = voices.find(i => i.name.startsWith("Microsoft Zira"))

                // Firefox
                if (!voice) {
                    voice = voices.find(i => i.name.startsWith("English (USA)"))

                    // Everything else
                    if (!voice) {
                        voice = voices[0];
                    }
                }
            }
        }

        populateVoiceList();

        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = populateVoiceList;
        }

        function speak(text) {
            if (voices.length < 1) {
                alert("It appears your browser does not have any voices.  Try installing Google Chrome.");
                return;
            }

            if (synth.speaking) {
                synth.cancel();
            }

            if (text !== "") {
                const utterThis = new SpeechSynthesisUtterance(text);

                utterThis.onend = function (event) {
                    console.log("SpeechSynthesisUtterance.onend");
                };

                utterThis.onerror = function (event) {
                    console.log("SpeechSynthesisUtterance.onerror");
                };

                utterThis.voice = voice;
                
                synth.speak(utterThis);
            }
        }
    </script>
  </body>
</html>