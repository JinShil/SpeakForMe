<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>SpeakForMe</title>

    <style>
        body {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        #wordButtons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 5px;
        }

        .phrases {
            display: grid;
            grid-template-columns: 1fr;
            gap: 5px;
        }

        .phraseCaption {
            color: #808080;
            font-size: 150%;
            display: flex;
        }

        .alignLeft {
            justify-content: flex-start;
        }

        .alignRight {
            justify-content: flex-end;
        }

        .phraseButtons {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }

        button {
            border-radius: 5px;
            border-width: 1px;
        }

        .wordButton {
            white-space: nowrap;
        }

        .largeFont {
            font-size: 220%;
        }

        #txt {
            text-align: center;
            padding: 0;
            background-color: #E2E2E2;
            width: 100%;
            height: 1.4em;
            white-space: nowrap;
            border: solid 1px black;
        }

        ::placeholder {
            color: #A0A0A0;
            opacity: 1;
        }
    </style>
  </head>

  <body>
    <div style="display: grid; grid-template-columns: 1fr auto auto; gap: 5px;">
        <input id="txt" class="largeFont" type="text" placeholder="Type here and press &quot;Enter&quot;" autofocus />
        <button style="padding: 0; border: none; cursor: pointer;" onclick="clearText(event);">
            <svg width="50" height="50" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg">
                <defs>
                <style>
                    .cls-1 {
                    fill: #9f4c4c;
                    fill-rule: evenodd;
                    }
                </style>
                </defs>
                <path class="cls-1" transform="translate(-910 -450)" d="M940,510a30,30,0,1,1,30-30A30,30,0,0,1,940,510Zm15-20.047A3.408,3.408,0,0,1,955,494.77l-0.221.22a3.42,3.42,0,0,1-4.833,0l-8.764-8.755a1.71,1.71,0,0,0-2.417,0l-8.741,8.747a3.419,3.419,0,0,1-4.836,0l-0.194-.193a3.408,3.408,0,0,1,.017-4.842l8.834-8.735a1.7,1.7,0,0,0,0-2.43l-8.831-8.725a3.409,3.409,0,0,1-.018-4.844l0.193-.193a3.413,3.413,0,0,1,2.418-1c0.944,0,3.255,1.835,3.872,2.455l7.286,7.287a1.708,1.708,0,0,0,2.417,0l8.764-8.748a3.419,3.419,0,0,1,4.832,0L955,465.243a3.408,3.408,0,0,1,0,4.818l-8.727,8.737a1.7,1.7,0,0,0,0,2.407Z"/>
            </svg>
        </button>
    </div>

    <div id="wordButtons">
    </div>

    <script>
        const synth = window.speechSynthesis;

        const inputForm = document.querySelector("form");
        const inputTxt = document.querySelector("#txt");
        const wordButtons = document.querySelector("#wordButtons");

        document.body.addEventListener("keypress", (e) =>
        {
            if (e.key == "Enter")
            {
                const text = inputTxt.value.trim();
                
                speak(text);

                inputTxt.select();

                e.preventDefault();
            }
        })

        function clearText(e) {
            inputTxt.value='';
            inputTxt.focus();
        }

        const simplePhrases = [
            "I don't know", "OK", "No", "Yes",
        ]

        const commonPhrases = [
            "I'm OK", "That's good", "Thank you", 
        ]

        const requestPhrases = [
            "I'm thirsty", "I'm hungry", "I'm tired", 
        ]

        const concernPhrases = [
            "I'm in pain", "I'm uncomfortable", "Please call 911"
        ]

        function createPhraseCategory(categoryName, phrases, className)
        {
            let container = document.createElement("div");
            container.classList.add("phrases");
            wordButtons.appendChild(container);

            let caption = document.createElement("div");
            caption.classList.add("phraseCaption");
            caption.classList.add(className);
            caption.textContent = categoryName;
            container.appendChild(caption);

            let phraseButtons = document.createElement("div");
            phraseButtons.classList.add("phraseButtons");
            phraseButtons.classList.add(className);
            container.appendChild(phraseButtons);

            phrases.forEach(i => {
                let b = document.createElement("button");
                b.classList.add("wordButton");
                b.classList.add("largeFont");
                b.innerText = i;
                b.addEventListener("click", speakWord);
                phraseButtons.appendChild(b);
            });
        }

        createPhraseCategory("Common", commonPhrases, "alignLeft");
        createPhraseCategory("Simple", simplePhrases, "alignRight");
        createPhraseCategory("Concern", concernPhrases, "alignLeft");
        createPhraseCategory("Requests", requestPhrases, "alignRight");

        function speakWord(e) {
            const text = e.target.textContent;
            speak(text);
            e.target.blur();
        }

        let voices = [];
        let voice;

        function populateVoiceList() {
            voices = synth.getVoices();

            // Google Chrome
            voice = voices.find(i => i.name === "Google US English");
                
            if (!voice) {
                // Microsoft Windows
                voice = voices.find(i => i.name.startsWith("Microsoft Zira"))

                // Firefox
                if (!voice) {
                    voice = voices.find(i => i.name.startsWith("English (USA)"))

                    // Everything else
                    if (!voice) {
                        voice = voices[0];
                    }
                }
            }
        }

        populateVoiceList();

        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = populateVoiceList;
        }

        function speak(text) {
            if (voices.length < 1) {
                alert("It appears your browser does not have any voices.  Try installing Google Chrome.");
                return;
            }

            if (synth.speaking) {
                synth.cancel();
            }

            if (text !== "") {
                const utterThis = new SpeechSynthesisUtterance(text);

                utterThis.onend = function (event) {
                    console.log("SpeechSynthesisUtterance.onend");
                };

                utterThis.onerror = function (event) {
                    console.log("SpeechSynthesisUtterance.onerror");
                };

                utterThis.voice = voice;
                
                synth.speak(utterThis);
            }
        }
    </script>
  </body>
</html>